package net.rdyonline.android_training.orm.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.rdyonline.android_training.orm.Speaker;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SPEAKER.
*/
public class SpeakerDao extends AbstractDao<Speaker, Long> {

    public static final String TABLENAME = "SPEAKER";

    /**
     * Properties of entity Speaker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Fname = new Property(1, String.class, "fname", false, "FNAME");
        public final static Property Lname = new Property(2, String.class, "lname", false, "LNAME");
        public final static Property Specialism = new Property(3, Integer.class, "specialism", false, "SPECIALISM");
    };

    private DaoSession daoSession;


    public SpeakerDao(DaoConfig config) {
        super(config);
    }
    
    public SpeakerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SPEAKER' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'FNAME' TEXT," + // 1: fname
                "'LNAME' TEXT," + // 2: lname
                "'SPECIALISM' INTEGER);"); // 3: specialism
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SPEAKER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Speaker entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fname = entity.getFname();
        if (fname != null) {
            stmt.bindString(2, fname);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(3, lname);
        }
 
        Integer specialism = entity.getSpecialism();
        if (specialism != null) {
            stmt.bindLong(4, specialism);
        }
    }

    @Override
    protected void attachEntity(Speaker entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Speaker readEntity(Cursor cursor, int offset) {
        Speaker entity = new Speaker( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lname
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // specialism
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Speaker entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSpecialism(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Speaker entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Speaker entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
