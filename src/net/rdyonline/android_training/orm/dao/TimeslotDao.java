package net.rdyonline.android_training.orm.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.rdyonline.android_training.orm.Timeslot;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TIMESLOT.
*/
public class TimeslotDao extends AbstractDao<Timeslot, Long> {

    public static final String TABLENAME = "TIMESLOT";

    /**
     * Properties of entity Timeslot.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property StartTime = new Property(1, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(2, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property Speaker = new Property(3, Long.class, "speaker", false, "SPEAKER");
        public final static Property Room = new Property(4, Long.class, "room", false, "ROOM");
    };

    private Query<Timeslot> speaker_TimeslotListQuery;
    private Query<Timeslot> room_TimeslotListQuery;

    public TimeslotDao(DaoConfig config) {
        super(config);
    }
    
    public TimeslotDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TIMESLOT' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'START_TIME' INTEGER," + // 1: startTime
                "'END_TIME' INTEGER," + // 2: endTime
                "'SPEAKER' INTEGER," + // 3: speaker
                "'ROOM' INTEGER);"); // 4: room
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TIMESLOT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Timeslot entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(2, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(3, endTime.getTime());
        }
 
        Long speaker = entity.getSpeaker();
        if (speaker != null) {
            stmt.bindLong(4, speaker);
        }
 
        Long room = entity.getRoom();
        if (room != null) {
            stmt.bindLong(5, room);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Timeslot readEntity(Cursor cursor, int offset) {
        Timeslot entity = new Timeslot( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // startTime
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // endTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // speaker
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // room
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Timeslot entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setEndTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setSpeaker(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setRoom(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Timeslot entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Timeslot entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "timeslotList" to-many relationship of Speaker. */
    public List<Timeslot> _querySpeaker_TimeslotList(Long speaker) {
        synchronized (this) {
            if (speaker_TimeslotListQuery == null) {
                QueryBuilder<Timeslot> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Speaker.eq(null));
                speaker_TimeslotListQuery = queryBuilder.build();
            }
        }
        Query<Timeslot> query = speaker_TimeslotListQuery.forCurrentThread();
        query.setParameter(0, speaker);
        return query.list();
    }

    /** Internal query to resolve the "timeslotList" to-many relationship of Room. */
    public List<Timeslot> _queryRoom_TimeslotList(Long room) {
        synchronized (this) {
            if (room_TimeslotListQuery == null) {
                QueryBuilder<Timeslot> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Room.eq(null));
                room_TimeslotListQuery = queryBuilder.build();
            }
        }
        Query<Timeslot> query = room_TimeslotListQuery.forCurrentThread();
        query.setParameter(0, room);
        return query.list();
    }

}
